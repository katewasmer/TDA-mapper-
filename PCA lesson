#Most recent update - 6/27/2020

- Class: meta
  Course: Introduction to TDA Mapper and its Applications
  Lesson: Principal Components Analysis
  Author: Kate Wasmer
  Type: Standard
  Organization: University of Iowa
  Version: 2.4.4
  
- Class: text
  Output: Welcome to the module on principal components analysis!
  
#Explaining what PCA is. 
- Class: text
  Output: Principal components analysis (PCA) is an essential part of data analysis. It allows us to analyze thousands of variables by reducing the data to 2 or 3 simple components to accurately interpret the data. 

#1D data example.
- Class: figure
  Output: Let's look at a simple dataset built using basic R commands. 
  Figure: simpledataset.R
  FigureType: new

#Explaining what a PCA line is.   
- Class: text
  Output: Now how do we perform a PCA? To do so, we need to find the line that encompasses the most data.  
  
#Explaining how the PCA line matches up with the data provided.   
- Class: figure
  Output: Logically, this line makes the most sense, given that our data is 1-dimensional. Therefore, there should be a straight line through all of the data points. 
  Figure: PCAlinebasic.R
  FigureType: new
  
#1D dataset with a PCA performed 
- Class: figure
  Output: Now, here is this dataset with a PCA performed. Since the data is 1D, we only need one axis to succinctly summarize the data. Consequently, we have cut the data storage by half, since now the data is only represented by an x-coordinate. 
  Figure: PCAbasic.R
  FigureType: new

#2D dataset with 30 points that lies approximately on a line, but with variation using the set.seed() and runif functions.   
- Class: text
  Output: Now, let's look at a dataset with some variation. 

- Class: figure
  Output: How would the PCA line look in this case? 
  Figure: simplevariation.R
  FigureType: new
  
- Class: figure
  Output: Notice that the line passes through many of the points, but it's not a perfect fit like the previous example. 
  Figure: PCA1variation.R
  FigureType: new 

#Explanation for why we need 2 PCA lines.   
- Class: text
  Output: To account for the lack of a perfect fit, we need a second PCA line. 
  
#Definition of PCA2 compared to PCA1  
- Class: figure
  Output: For any PCA, the second PCA line will be perpendicular to the first, as shown here. Notice the 90 degree angle formed by these lines.
  Figure: PCA2variation.R
  FigureType: new
  
#Rotating the 2D dataset   
- Class: text
  Output: We want to rotate the graph so that the PCA1 line is parallel to the x-axis. 
 
- Class: figure
  Output: By doing this, we will get a rotated plot that looks like this. The red line represents the PCA1 line. 
  Figure: PCAsimplerot.R
  FigureType: new
  
- Class: text
  Output: Notice that the data points generally lie along this line, but some diverge slightly below or above it. 
  
- Class: text
  Output: The majority of datasets you work with won't be as simple as two we previously saw. 

#Introducting to 3D datasets 
- Class: text
  Output: Rather than a 1D or 2D dataset, let's look at a 3D dataset and see how we can perform a PCA.
  
#Install scatterplot3d whenever you need to view or work with a 3D dataset  
- Class: cmd_question
  Output: In order to view a 3D dataset, we need to install the scatterplot3d package built in R. Please type the following; if (!require(package = "scatterplot3d")){install.packages(pkgs = "scatterplot3d")}
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='if (!require(package = "scatterplot3d")){install.packages(pkgs = "scatterplot3d")}')
  Hint: Did you remember to use the install.packages function? 
  
#Cone data   
- Class: figure
  Output: Here, we have the dataset of a cone. 
  Figure: Data3D.R
  FigureType: new 
  
- Class: text
  Output: While this example is more complicated, we can still perform a PCA on the dataset as before. 

#PCA lines for cone dataset 
- Class: figure
  Output: Since the data is 3D, we will get 3 PCA lines, as shown here. These lines encompass the majority of the dataset. 
  Figure: Data3DPCA.R
  FigureType: new 
  
- Class: text
  Output: Notice that the 3 lines are perpendicular to one another, just like in the previous example with 2D data.

#Explaining orthogonality for PCA lines   
- Class: text
  Output: No matter how many dimensions the dataset has, each PCA line will always be orthogonal to the previous line. 
  
- Class: Figure
  Output: Here is the cone projected onto the x-y plane. 
  Figure: PCA3Drotation12.R
  FigureType: new 

#Explaining PCA projections and how to project correctly 
- Class: text 
  Output: This projection shows what the top of the cone looks like, if we sliced it into an infinite number of 2D planes. 

- Class: text
  Output: While this projection is accurate, it isn't particularly reflective of the general shape of the cone. 
  
- Class: text
  Output: Let's see what happens if we project onto the x-z plane instead. 
  
- Class: Figure
  Output: Much better! Now we have a more relevant image, with the cone being rotated upside down. 
  Figure: PCA3Drotation13.R
  FigureType: new 

- Class: text
  Output: How was I able to find the PCA lines and transform the figures? Let's do an example of our own. 

#Student example - flares dataset, from figure TDAflarecode.R
- Class: figure
  Output: Your objective is to perform a PCA on the figure shown to the right. You will be guided through every step.
  Figure: TDAflarecode.R
  FigureType: new

- Class: text
  Output: The first thing we need to do is find the first principal component. 
  
- Class: figure
  Output: When performing specific commands, our first PCA line should emulate what you see on the right. 
  Figure: PCA1line.R
  FigureType: new
  
- Class: cmd_question
  Output: To find the PCA, create a variable called 'pca' and let it equal prcomp(flares). 
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='pca <- prcomp(flares)')
  Hint: Did you remember to name your variable pca? 
  
- Class: text
  Output: The [1,] row represents the x-axis, and the [2,] row represents the y-axis. 
  
- Class: text
  Output: Since the data points generated to create the flare are randomized, each student should have a slightly different result for their PCA. 
  
- Class: text 
  Output: However, each student should have a PC1 coordinate close to (-.96, .2). This means that our PC1 line will cross through the origin point and (-.96, 2). 
  
- Class: cmd_question
  Output: With this information in mind, create a variable and name it x, to establish our horizontal vector. Set it equal to c(0,-.96). 
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='x <- c(0,-.96)')
  Hint: Did you remember to name your variable x? 
  
- Class: cmd_question
  Output: Next, we want to create our vertical vector. Name it y and set it equal to c(0,.2)
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='y <- c(0,.2)')
  Hint: Did you remember to name your variable y?
  
- Class: cmd_question
  Output: To combine the directions from these vectors to obtain a diagnonal line, create a variable called mod. Set it equal to lm(y ~ x). 
  CorrectAnswer: EXPR
  AnswerTests: omnitest(correctExpr='mod <- lm(y ~ x)')
  Hint: Did you remember to put y before x? 

- Class: cmd_question
  Output: After creating this linear model, we can plot the line. Using the abline function, type abline(mod, lw = 2, col = "blue"). You will see a line that crosses through both the zero vector and the vector for PC1. 
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='abline(mod, lw = 2, col = "blue")')
  Hint: Did you remember to use the abline function? If you are confused, type ?abline for more information on what this function entails. 
  
- Class: text
  Output: Notice that this looks exactly like the figure shown previously. 

- Class: figure
  Output: Our second PCA line, shown to the right, captures the second largest amount of variability. When we plot both lines together, the intersection will perform a 90 degree angle with the PC1 line. 
  Figure: PC2line.R
  FigureType: new
  
- Class: cmd_question
  Output: Let's create a line for PC2. Call the second PCA coordinate by typing pca into the console again.  
  CorrectAnswer: EXPR
  AnswerTests: omnitest(correctExpr='pca')
  Hint: Did you remember to type pca to call it?

- Class: text
  Output: This time, the line will pass through the origin, and approximately (-.2, -.96)

- Class: cmd_question
  Output: Create a variable called w and set it equal to c(0,-.2). This will be our horizontal vector. 
  CorrectAnswer: EXPR
  AnswerTests: omnitest(correctExpr='w <- c(0,-.2)')
  Hint: Did you remember to name your variable w?

- Class: cmd_question
  Output: For our vertical vector, create a variable called z and set it equal to c(0,-.96). 
  CorrectAnswer: EXPR
  AnswerTests: omnitest(correctExpr='z <- c(0,-.96)')
  Hint: Did you remember to call this variable z? 

- Class: cmd_question
  Output: Now that we have vectors in both directions, create the linear model. Name this variable mod1 and let it equal lm(z ~ w)
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='mod1 <- lm(z ~ w)')
  Hint: Make sure to name your variable mod1, and not mod. 

- Class: cmd_question
  Output: Finally, we can plot this line. Type abline(mod1, lw = 2, col = "blue") to plot this line.
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='abline(mod1, lw = 2, col = "blue")')
  Hint: Did you remember to use the abline function?

- Class: text
  Output: By definition, for any principal component analysis, the PCA1 and PCA2 lines will intersect at a 90 degree angle, as shown to the right. 
  
- Class: text 
  Output: When you work with data analysis, it's always a good idea to color-code your data to make it easier for people to distinguish it. 
  
- Class: text
  Output: For this part of the exercise, we will use two different packages. 
  
- Class: cmd_question
  Output: To install ggplot, type the following into the console; if (!require(package = "ggplot2")){install.packages(pkgs = "ggplot2")}
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='if (!require(package = "ggplot2")){install.packages(pkgs = "ggplot2")}')
  Hint: Did you remember to use the install.packages function? 
  
- Class: cmd_question
  Output: Next, we want to install Viridis. Type the following; if (!require(package = "viridis")){install.packages(pkgs = "viridis")}
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='if (!require(package = "viridis")){install.packages(pkgs = "viridis")}')
  Hint: Did you remember to use the install.packages function? 
  
- Class: text
  Output: Great! Now we're ready to add color to our data. 
  
- Class: text
  Output: There are many things that you can do with ggplot and Viridis related to TDA mapper. 
  
- Class: figure
  Output: In the Viridis package, there are many different color pallettes that you can use to distinguish your data. Here is one example you can use. 
  Figure: pcaflareA.R
  FigureType: new  
  
 Class: figure
  Output: Notice that there is a color gradient going across the X1-axis. 
  Figure: pcaflareA.R
  FigureType: new  
  
 Class: figure
  Output: You could also create a color gradient going across the X2-axis, such as the figure on the right. 
  Figure: pcaflareB.R
  FigureType: new  

#use ggplot to color the data BEFORE rotating!!!
- Class: figure
  Output: Like the previous examples, when we perform our PCA on this flare data set, it will rotate like this. 
  Figure: PCArotation.R
  FigureType: new
  
- Class: cmd_question
  Output: To achieve this, we must yield the coordinates for the linear transformation of PC1. Create a variable called PCA1 and set it equal to (as.matrix(flares1) %*% pca$rotation)[,1]
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='PCA1 <- (as.matrix(flares1) %*% pca$rotation)[,1]')
  Hint: Did you remember to name your variable PCA1?

- Class: cmd_question
  Output: Create a variable called PCA2 and set it equal to (as.matrix(flares1) %*% pca$rotation)[,2]
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='PCA2 <- (as.matrix(flares1) %*% pca$rotation)[,2]')
  Hint: Did you remember to name your variable PCA2?

- Class: cmd_question
  Output: Now that we have defined the first and second principal components, we can bind them together. Create a variable called PCA12 and set it equal to cbind(PCA1, PCA2). 
  CorrectAnswer: EXPR 
  AnswerTests: omnitest(correctExpr='PCA12 <- cbind(PCA1, PCA2)')
  Hint: Did you remember to name your variable PCA12?
  

  
- Class: text
  Output: Congratulations! You have performed a PCA on the flare data set.
  
- Class: text
  Output: As you can see from this exercise, there are many ways we can utilize PCA. PCA is essential in many fields of math and science. For example, PCA is often used in biological anthropology to compare different human populations around the globe. While this course deals with TDA mapper, this exercise shows that TDA mapper can be used in other ways besides topology. Hopefully this lesson gave you a better understanding of data analysis and PCA. 



